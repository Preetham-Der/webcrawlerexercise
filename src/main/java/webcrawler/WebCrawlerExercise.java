package webcrawler;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ForkJoinPool;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class WebCrawlerExercise implements LinkHandler {
	private Map<String, List<String>> visitedLinksMap;
	private String seedUrl;
	private ForkJoinPool mainPool;
	private String singleDomainName;

	public WebCrawlerExercise(String singleDomainName, String startingURL, int maxThreads) {
		this.seedUrl = startingURL;
		mainPool = new ForkJoinPool(maxThreads);
		this.visitedLinksMap = new ConcurrentHashMap<String, List<String>>();
		this.singleDomainName=singleDomainName;
	}

	private void startCrawling() {
		System.out.println("startCrawling");
		mainPool.invoke(new LinkFinderAction(this.seedUrl, this, singleDomainName));
	}

	@Override
	public int size() {
		return visitedLinksMap.size();
	}

	@Override
	public void addVisited(String s, List<String> sublinks) {
		visitedLinksMap.put(s, sublinks);
	}

	@Override
	public boolean visited(String s) {
		return visitedLinksMap.containsKey(s);
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String[] args) throws Exception {
		String seedUrl;
		String filterDomain;
		int noOfThreads =64;
		String crawlOutputFileName ="sitemap.json";
		if(args!=null && args.length >=2) {
			filterDomain =args[0];
			seedUrl = args[1];
			if (args.length ==3) {
				try {
				noOfThreads = Integer.parseInt(args[2]);
				}catch(NumberFormatException nex) {
					System.out.println("Number of threads is not a proper number");
				}
			}
			if (args.length ==4) {
				crawlOutputFileName =args[3];
			}
			
			WebCrawlerExercise crwlr = new WebCrawlerExercise(filterDomain,seedUrl, noOfThreads);
			crwlr.startCrawling();

			GsonBuilder gsonMapBuilder = new GsonBuilder();

			Gson gsonObject = gsonMapBuilder.setPrettyPrinting().create();

			String JSONObject = gsonObject.toJson(crwlr.visitedLinksMap);
			Files.write(Paths.get(crawlOutputFileName), JSONObject.getBytes(), StandardOpenOption.CREATE);
		}
		
		
	}
}
